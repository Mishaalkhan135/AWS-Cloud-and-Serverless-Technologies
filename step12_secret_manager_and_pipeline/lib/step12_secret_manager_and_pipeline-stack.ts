import { Duration, Stack, StackProps } from 'aws-cdk-lib';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager'
import * as lambda from "aws-cdk-lib/aws-lambda"
import * as iam from 'aws-cdk-lib/aws-iam'
import { Construct } from 'constructs';

export class Step12SecretManagerAndPipelineStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);
    //========================================================================================
    // The code that defines your stack goes here for infrastructure the key is created here!
    //========================================================================================

    const secret1 = new secretsmanager.Secret(this,"Secret1")
    const secret2 = new secretsmanager.Secret(this ,"Secret2",{
      secretName:"MySecretName"
    })
    const secret3 = new secretsmanager.Secret(this,"Secret3",{
      secretName:"MySecrets",
      generateSecretString: {
        secretStringTemplate: JSON.stringify({}),//To get an object for secret
        generateStringKey: 'SecretKey',
      },
      
    })
    const lambdaFn = new lambda.Function(this, `ExampleLambdaAssetFn`, {
      code: lambda.Code.fromAsset("lambda"),
      runtime: lambda.Runtime.NODEJS_12_X,
      // role: role,
      //Example_Secret_key to declare keys that lambda function can access
      environment:{
        EXAMPLE_SECRET_KEY1:`${
          //The secret key with a name declared 
            secretsmanager.Secret.fromSecretAttributes(this, 'exampleKeyAutoGenerated', {
              secretPartialArn: secret1.secretArn
            }).secretValue
          }`,
          EXAMPLE_SECRET_KEY2:`${
          //The secret key has a name declared
          secretsmanager.Secret.fromSecretNameV2(this,"ExampleKey1",secret2.secretName)
        }`,
        //Name of secret u want
        SECRET_NAME: secret3.secretName,
        KEY_IN_SECRET_NAME: "SecretKey"
      },
      handler: "index.handler",
    })
    //============================================================
    //the secret key will be chnaged after every 24 hours per day 
    secret3.addRotationSchedule('RotationSchedule', {
      rotationLambda: lambdaFn,
      automaticallyAfter: Duration.hours(24)
    });
    //==============================
    //Giving lambda function access 
    //==============================
    lambdaFn.grantInvoke(new iam.ServicePrincipal('secretsmanager.amazonaws.com'));
    lambdaFn.addToRolePolicy(new iam.PolicyStatement({
      resources: [secret3.secretArn],
      actions: ['secretsmanager:GetSecretValue']
    }));

  }
}
